import * as playwright from 'playwright';
import { Page, Browser, APIRequest as APIRequest$2, APIRequestContext } from 'playwright';
import { Expect } from 'expect';

interface APIRequest$1 extends RequestInit {
    /**
     * Target URL for the request
     */
    url?: string;
    /**
     * Query parameters to be sent with the URL
     */
    params?: URLSearchParams | string;
    /**
     * Data to be sent with the request
     */
    data?: string;
}
interface APIRequestConfig {
    baseURL: string;
    /**
     * An object containing additional HTTP headers to be sent with every request
     * @default {}
     */
    extraHTTPHeaders: {
        [key: string]: string;
    };
    /**
     * Maximum time in milliseconds to wait for the response
     */
    timeout: number;
    /**
     * Whether to ignore HTTPS errors when sending network requests
     * @default false
     */
    ignoreHTTPSErrors: boolean;
    /**
     * Set cookies for the request
     */
    storageState: SessionStorageState[];
}
interface SessionStorageState {
    name: string;
    value: string;
    domain: string;
    path: string;
    expires: number;
    httpOnly: boolean;
    secure: boolean;
    sameSite: "Strict" | "Lax" | "None";
}
interface APIFetchConfig {
    /**
     * Maximum number of retries to attempt
     * @default 0
     */
    maxRetries: number;
    /**
     * Whether to ignore HTTPS errors when sending network requests
     * This will override the global setting in the APIRequestConfig
     * @default false
     */
    ignoreHTTPSErrors: boolean;
}

declare class APIRequest {
    private config;
    constructor(config?: Partial<APIRequestConfig>);
    fetch(requestBase: APIRequest$1, config?: Partial<APIFetchConfig>): string;
    private processRequest;
}

type TestContext = {
    page: Page;
    browser: Browser;
    playwright: typeof playwright & {
        request: APIRequest$2 & {
            newContext: (options?: {
                extraHTTPHeaders?: Record<string, string>;
            }) => Promise<APIRequestContext>;
        };
    };
    currentTest?: TestFunction;
    currentStepIndex?: number;
};
interface TestFunction {
    name?: string;
    payload?: any;
    fn?: (context: TestContext) => Promise<void>;
    expectations?: {
        description?: string;
        payload?: any;
        fn?: (context: TestContext) => Promise<void>;
        directExecution?: boolean;
    }[];
    beforeFn?: (context: TestContext) => void | Promise<void>;
    afterFn?: (context: TestContext) => void | Promise<void>;
    directExecution?: boolean;
}
type TestChain = {
    expect(fn: (context: TestContext) => Promise<void>): TestChain;
    expect(description: string): TestChain;
    expect(description: string, fn?: (context: TestContext) => Promise<void>): TestChain;
    expect(description: string, payload?: any, fn?: (context: TestContext) => Promise<void>): TestChain;
    before(fn: (context: TestContext) => void | Promise<void>): TestChain;
    after(fn: (context: TestContext) => void | Promise<void>): TestChain;
};
type TestAPI = {
    (fn: (context: TestContext) => Promise<void>): TestChain;
    (name: string): TestChain;
    (names: string[]): TestChain;
    (name: string, fn?: (context: TestContext) => Promise<void>): TestChain;
    (name: string, payload?: any, fn?: (context: TestContext) => Promise<void>): TestChain;
    beforeAll(fn: (context: TestContext) => Promise<void>): void;
    beforeAll(name: string, fn: (context: TestContext) => Promise<void>): void;
    afterAll(fn: (context: TestContext) => Promise<void>): void;
    afterAll(name: string, fn: (context: TestContext) => Promise<void>): void;
    beforeEach(fn: (context: TestContext) => Promise<void>): void;
    beforeEach(name: string, fn: (context: TestContext) => Promise<void>): void;
    afterEach(fn: (context: TestContext) => Promise<void>): void;
    afterEach(name: string, fn: (context: TestContext) => Promise<void>): void;
};

interface ShortestConfig {
    headless: boolean;
    baseUrl: string;
    testPattern: string;
    anthropicKey?: string;
    mailosaur?: {
        apiKey?: string;
        serverId?: string;
    };
}

declare global {
    var expect: Expect;
}

declare function initialize(): Promise<ShortestConfig | null>;
declare function getConfig(): ShortestConfig;
declare const test: TestAPI;
declare const shortest: TestAPI;

export { APIRequest, type ShortestConfig, getConfig, initialize, shortest, test };
